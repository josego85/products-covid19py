services:
  app:
    build:
      context: .
    container_name: app
    ports:
      - "8080:80"
    volumes:
      - .:/var/www/html
    depends_on:
      - mysql
    networks:
      - app-network

  mysql:
    image: mysql:8.0.42
    container_name: mysql
    restart: always
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
    ports:
      - '3306:3306'
    volumes:
      - 'mysql-data:/var/lib/mysql'
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5

  sonarqube:
    image: sonarqube:latest
    container_name: sonarqube
    ports:
      - '9000:9000'
    environment:
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    networks:
      - app-network

  scanner:
    image: sonarsource/sonar-scanner-cli:5.0
    volumes:
      - ./:/usr/src
    working_dir: /usr/src
    environment:
      SONAR_TOKEN: ${SONAR_TOKEN}
    command: -Dsonar.host.url=http://sonarqube:9000
    networks:
      - app-network

volumes:
  mysql-data:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:


networks:
  app-network:
    driver: bridge
